/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ru.rsatu.ius;

import java.awt.Color;
import java.awt.event.ItemEvent;
import java.nio.ByteBuffer;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.border.LineBorder;
import jssc.SerialPort;
import jssc.SerialPortEvent;
import jssc.SerialPortEventListener;
import jssc.SerialPortException;
import jssc.SerialPortList;

/**
 *
 * @author pavel
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    
    private static SerialPort serialPort;
    
    public MainFrame() {
        initComponents();
        //параметры
        ParamsStorage.init();
        KpTextField.setText(String.valueOf(ParamsStorage.getKp()));
        KiTextField.setText(String.valueOf(ParamsStorage.getKi()));
        KdTextField.setText(String.valueOf(ParamsStorage.getKd()));
        RelayComboBox.setSelectedItem(String.valueOf(ParamsStorage.getActive_relay()));
        ShutdownTempTextField.setText(String.valueOf(ParamsStorage.getShutdown_temp()+128));
        TargetTempTextField.setText(String.valueOf(ParamsStorage.getTarget_temp()+128));
        //график
        JFrame jf =  new Chart(ChartPanel);
        //логгер
        ComLogger.init(ComLogTextArea);
        //обработчик команд
        CommandParser.init();        
        String[] l = SerialPortList.getPortNames();
        for(String s:l){
            ComPortComboBox.addItem(s);
            System.out.println(s);
            ComLogger.logLine(s);
        }
            
//        serialPort = new SerialPort("COM3");
//        try {
//            serialPort.openPort();
//            serialPort.setParams(SerialPort.BAUDRATE_9600, SerialPort.DATABITS_8, SerialPort.STOPBITS_1, SerialPort.PARITY_NONE);
//            serialPort.setEventsMask(SerialPort.MASK_RXCHAR);
//            serialPort.addEventListener(new EventListener());
//        }
//        catch (SerialPortException ex) {
//            System.out.println(ex);
//        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ChartPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ComLogTextArea = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        ComPortComboBox = new javax.swing.JComboBox<>();
        KpTextField = new javax.swing.JTextField();
        KiTextField = new javax.swing.JTextField();
        KdTextField = new javax.swing.JTextField();
        TargetTempTextField = new javax.swing.JTextField();
        ShutdownTempTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        ApplyButton = new javax.swing.JButton();
        PowerToggleButton = new javax.swing.JToggleButton();
        RelayComboBox = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jMenuBar1 = new javax.swing.JMenuBar();
        OpenMenuItem = new javax.swing.JMenu();
        SaveMenuItem = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ChartPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout ChartPanelLayout = new javax.swing.GroupLayout(ChartPanel);
        ChartPanel.setLayout(ChartPanelLayout);
        ChartPanelLayout.setHorizontalGroup(
            ChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
        );
        ChartPanelLayout.setVerticalGroup(
            ChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 262, Short.MAX_VALUE)
        );

        ComLogTextArea.setEditable(false);
        ComLogTextArea.setColumns(20);
        ComLogTextArea.setRows(5);
        jScrollPane1.setViewportView(ComLogTextArea);

        ComPortComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComPortComboBoxItemStateChanged(evt);
            }
        });

        KpTextField.setText("jTextField1");
        KpTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                KpTextFieldFocusLost(evt);
            }
        });

        KiTextField.setText("jTextField2");
        KiTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                KiTextFieldFocusLost(evt);
            }
        });

        KdTextField.setText("jTextField3");
        KdTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                KdTextFieldFocusLost(evt);
            }
        });

        TargetTempTextField.setText("jTextField4");
        TargetTempTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                TargetTempTextFieldFocusLost(evt);
            }
        });

        ShutdownTempTextField.setText("jTextField5");
        ShutdownTempTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ShutdownTempTextFieldFocusLost(evt);
            }
        });

        jLabel1.setText("Kp");

        jLabel2.setText("Ki");

        jLabel3.setText("Kd");

        jLabel4.setText("target temp");

        jLabel6.setText("shutdown temp");

        ApplyButton.setText("apply");
        ApplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyButtonActionPerformed(evt);
            }
        });

        PowerToggleButton.setText("ВКЛ/ВЫКЛ");
        PowerToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PowerToggleButtonActionPerformed(evt);
            }
        });

        RelayComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3" }));
        RelayComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                RelayComboBoxItemStateChanged(evt);
            }
        });

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(PowerToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ComPortComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(27, 27, 27)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(KpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(KiTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(KdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RelayComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(TargetTempTextField)
                    .addComponent(ShutdownTempTextField)
                    .addComponent(ApplyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(87, 87, 87))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ComPortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(KpTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TargetTempTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(KiTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel2)
                                .addComponent(ShutdownTempTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(PowerToggleButton))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(ApplyButton)
                    .addComponent(RelayComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        OpenMenuItem.setText("Open log");
        jMenuBar1.add(OpenMenuItem);

        SaveMenuItem.setText("Save log");
        SaveMenuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SaveMenuItemMouseClicked(evt);
            }
        });
        SaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuItemActionPerformed(evt);
            }
        });
        jMenuBar1.add(SaveMenuItem);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ApplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyButtonActionPerformed
        // TODO add your handling code here:
        //проверка ввода
        if(inputCheck()){
            //отправка команд на передачу измененных параметров
            //kp
            float fvalue = Float.valueOf(KpTextField.getText());
            //новое
            if(ParamsStorage.getKp()!= fvalue){
                //сохранить
                ParamsStorage.setKp(fvalue);
                byte value[] = ByteBuffer.allocate(4).putFloat(fvalue).array();
                byte buffer[] = new byte[10];
                buffer[0]=(byte)0xff;   //начало кадра
                buffer[1]=(byte)0x99;   //передача параметра
                buffer[2]=(byte)0x00;   //ид команды (любое, пересчитывается)  
                buffer[3]=(byte)0x33;   //ид параметра
                buffer[4]= value[0];
                buffer[5]= value[1];
                buffer[6]= value[2];
                buffer[7]= value[3];
                buffer[8]=(byte)0x00;  //сумма (любое)
                buffer[9]=(byte)0x81;  //конец кадра
                //отправить
                try {                    
                    ComTranciever.writeCommand(buffer);
                } catch (SerialPortException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //ki
            fvalue = Float.valueOf(KiTextField.getText());
            //новое
            if(ParamsStorage.getKi()!= fvalue){
                //сохранить
                ParamsStorage.setKi(fvalue);
                byte value[] = ByteBuffer.allocate(4).putFloat(fvalue).array();
                byte buffer[] = new byte[10];
                buffer[0]=(byte)0xff;   //начало кадра
                buffer[1]=(byte)0x99;   //передача параметра
                buffer[2]=(byte)0x00;   //ид команды (любое, пересчитывается)  
                buffer[3]=(byte)0x55;   //ид параметра
                buffer[4]= value[0];
                buffer[5]= value[1];
                buffer[6]= value[2];
                buffer[7]= value[3];
                buffer[8]=(byte)0x00;  //сумма (любое)
                buffer[9]=(byte)0x81;  //конец кадра
                //отправить
                try {                    
                    ComTranciever.writeCommand(buffer);
                } catch (SerialPortException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        
            //kd
            fvalue = Float.valueOf(KdTextField.getText());
            //новое
            if(ParamsStorage.getKd()!= fvalue){
                //сохранить
                ParamsStorage.setKd(fvalue);
                byte value[] = ByteBuffer.allocate(4).putFloat(fvalue).array();
                byte buffer[] = new byte[10];
                buffer[0]=(byte)0xff;   //начало кадра
                buffer[1]=(byte)0x99;   //передача параметра
                buffer[2]=(byte)0x00;   //ид команды (любое, пересчитывается)  
                buffer[3]=(byte)0x99;   //ид параметра
                buffer[4]= value[0];
                buffer[5]= value[1];
                buffer[6]= value[2];
                buffer[7]= value[3];
                buffer[8]=(byte)0x00;  //сумма (любое)
                buffer[9]=(byte)0x81;  //конец кадра
                //отправить
                try {                    
                    ComTranciever.writeCommand(buffer);
                } catch (SerialPortException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //tt
            byte bvalue = (byte) (Integer.valueOf(TargetTempTextField.getText()) - 128);
            //новое
            if(ParamsStorage.getTarget_temp()!= bvalue){
                //сохранить
                ParamsStorage.setTarget_temp(bvalue);
                byte buffer[] = new byte[7];
                buffer[0]=(byte)0xff;   //начало кадра
                buffer[1]=(byte)0x99;   //передача параметра
                buffer[2]=(byte)0x00;   //ид команды (любое, пересчитывается)  
                buffer[3]=(byte)0xAA;   //ид параметра
                buffer[4]= (byte)((bvalue + 128) & 0xFF);
                buffer[5]=(byte)0x00;  //сумма (любое)
                buffer[6]=(byte)0x81;  //конец кадра
                //отправить
                try {                    
                    ComTranciever.writeCommand(buffer);
                } catch (SerialPortException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //st
            bvalue = (byte) (Integer.valueOf(ShutdownTempTextField.getText()) - 128);
            //новое
            if(ParamsStorage.getShutdown_temp()!= bvalue){
                //сохранить
                ParamsStorage.setShutdown_temp(bvalue);
                byte buffer[] = new byte[7];
                buffer[0]=(byte)0xff;   //начало кадра
                buffer[1]=(byte)0x99;   //передача параметра
                buffer[2]=(byte)0x00;   //ид команды (любое, пересчитывается)  
                buffer[3]=(byte)0x66;   //ид параметра
                buffer[4]= (byte)((bvalue + 128) & 0xFF);
                buffer[5]=(byte)0x00;  //сумма (любое)
                buffer[6]=(byte)0x81;  //конец кадра
                //отправить
                try {                    
                    ComTranciever.writeCommand(buffer);
                } catch (SerialPortException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            //ar
            bvalue = Byte.valueOf(RelayComboBox.getSelectedItem().toString());
             //новое
            if(ParamsStorage.getActive_relay()!= bvalue){
                //сохранить
                ParamsStorage.setActive_relay(bvalue);
                byte buffer[] = new byte[7];
                buffer[0]=(byte)0xff;   //начало кадра
                buffer[1]=(byte)0x99;   //передача параметра
                buffer[2]=(byte)0x00;   //ид команды (любое, пересчитывается)  
                buffer[3]=(byte)0xcc;   //ид параметра
                buffer[4]= bvalue;
                buffer[5]=(byte)0x00;  //сумма (любое)
                buffer[6]=(byte)0x81;  //конец кадра
                //отправить
                try {                    
                    ComTranciever.writeCommand(buffer);
                } catch (SerialPortException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        //System.out.println(newKp);
    }//GEN-LAST:event_ApplyButtonActionPerformed

    /**
     * проверка ввода
     * @return 
     */
    private boolean inputCheck(){
        boolean result = true;
        //kp
        try{
            float newKp = Float.valueOf(KpTextField.getText());
            KpTextField.setBorder(new LineBorder(Color.GRAY));
        }
        catch(NumberFormatException e){
            result = false;
            KpTextField.setBorder(new LineBorder(Color.RED));
        };
        //ki
        try{
            float newKi = Float.valueOf(KiTextField.getText());
            KiTextField.setBorder(new LineBorder(Color.GRAY));
        }
        catch(NumberFormatException e){
            result = false;
            KiTextField.setBorder(new LineBorder(Color.RED));
        };
        //kd
        try{
            float newKd = Float.valueOf(KdTextField.getText());
            KdTextField.setBorder(new LineBorder(Color.GRAY));
        }
        catch(NumberFormatException e){
            result = false;
            KdTextField.setBorder(new LineBorder(Color.RED));
        };
        //target temp
        try{
            byte tt = Byte.parseByte(String.valueOf(Integer.valueOf(TargetTempTextField.getText()) - 128));
            TargetTempTextField.setBorder(new LineBorder(Color.GRAY));
        }
        catch(NumberFormatException e){
            result = false;
            TargetTempTextField.setBorder(new LineBorder(Color.RED));
        };
        //shutdown temp
        try{
            byte st = Byte.parseByte(String.valueOf(Integer.valueOf(ShutdownTempTextField.getText()) - 128));
            ShutdownTempTextField.setBorder(new LineBorder(Color.GRAY));
        }
        catch(NumberFormatException e){
            result = false;
            ShutdownTempTextField.setBorder(new LineBorder(Color.RED));
        };
        
        return result;
    }
    
    private void PowerToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PowerToggleButtonActionPerformed
        // TODO add your handling code here:
        byte buffer[] = new byte[5];
            buffer[0]=(byte)0xff;
            buffer[1]=(byte)0x66;
            buffer[2]=(byte)0x00;  //любое         
            buffer[3]=(byte)0x66;  //любое 
            buffer[4]=(byte)0x81;
        try {
            ComTranciever.writeCommand(buffer);
        } catch (SerialPortException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PowerToggleButtonActionPerformed

    private void ComPortComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComPortComboBoxItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange() == ItemEvent.DESELECTED){
            try {
                System.out.println(ComPortComboBox.getSelectedItem());
                ComTranciever.closePort();
                ComTranciever.openPort((String)ComPortComboBox.getSelectedItem());
            } catch (SerialPortException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_ComPortComboBoxItemStateChanged

    private void RelayComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_RelayComboBoxItemStateChanged
        // TODO add your handling code here:
        if(evt.getStateChange() == ItemEvent.DESELECTED){
            System.out.println(RelayComboBox.getSelectedItem());
        }
    }//GEN-LAST:event_RelayComboBoxItemStateChanged

    private void KpTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_KpTextFieldFocusLost
        // TODO add your handling code here:
        inputCheck();
    }//GEN-LAST:event_KpTextFieldFocusLost

    private void KiTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_KiTextFieldFocusLost
        // TODO add your handling code here:
        inputCheck();
    }//GEN-LAST:event_KiTextFieldFocusLost

    private void KdTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_KdTextFieldFocusLost
        // TODO add your handling code here:
        inputCheck();
    }//GEN-LAST:event_KdTextFieldFocusLost

    private void TargetTempTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TargetTempTextFieldFocusLost
        // TODO add your handling code here:
        inputCheck();
    }//GEN-LAST:event_TargetTempTextFieldFocusLost

    private void ShutdownTempTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ShutdownTempTextFieldFocusLost
        // TODO add your handling code here:
        inputCheck();
    }//GEN-LAST:event_ShutdownTempTextFieldFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void SaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuItemActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SaveMenuItemActionPerformed

    private void SaveMenuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SaveMenuItemMouseClicked
        // TODO add your handling code here:
        ComLogger.saveLogToFile();
    }//GEN-LAST:event_SaveMenuItemMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ApplyButton;
    private javax.swing.JPanel ChartPanel;
    private javax.swing.JTextArea ComLogTextArea;
    private javax.swing.JComboBox<String> ComPortComboBox;
    private javax.swing.JTextField KdTextField;
    private javax.swing.JTextField KiTextField;
    private javax.swing.JTextField KpTextField;
    private javax.swing.JMenu OpenMenuItem;
    private javax.swing.JToggleButton PowerToggleButton;
    private javax.swing.JComboBox<String> RelayComboBox;
    private javax.swing.JMenu SaveMenuItem;
    private javax.swing.JTextField ShutdownTempTextField;
    private javax.swing.JTextField TargetTempTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables
}
